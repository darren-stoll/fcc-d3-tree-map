// Mostly used example for reference as learning experience.

// The project only requires that you use one of the data sets to complete it, but for learning purposes I'm going to utilize all three in the code. However, it will not work on codepen due to how codepen works.

// Define parameters that will be used in the search bar
const KICKSTARTER = "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/kickstarter-funding-data.json";

const MOVIE = "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json";

const VIDEO_GAME = "https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json";

const DATASETS = {
  videogames: {
    FILE_PATH: VIDEO_GAME
  },
  movies: {
    FILE_PATH: MOVIE
  },
  kickstarter: {
    FILE_PATH: KICKSTARTER
  }
}

var urlParams = new URLSearchParams(window.location.search);
const DEFAULT_DATASET = "videogames";
const DATASET = DATASETS[DEFAULT_DATASET];

// Define base attributes
var w = 960, h = 570;
var legendWidth = 500;

// Define SVG base
var svg = d3.select("#svgcontainer")
  .append("svg")
  .attr("width", w)
  .attr("height", h);

// Define tooltip base
var tooltip = d3.select("#svgcontainer")
  .append("div")
  .attr("class", "tooltip")
  .attr("id", "tooltip")
  .style("opacity", 0);

// Create color scale between color and "white" with gamma of 0.2
var fader = (color) => d3.interpolateRgb(color, "white")(0.2);
// schemeCategory20 was removed in v4, so using schemeAccent instead.
var color = d3.scaleOrdinal(d3.schemeAccent.map(fader));
var format = d3.format(",d");

// Define treemap
var treemap = d3.treemap()
  .size([w, h])
  .paddingInner(0);

// Load dataset with d3.json
d3.json(DATASET.FILE_PATH).then((data) => {
  
  // Create data hierarchy and store the root node into variable
  var root = d3.hierarchy(data)
    // Take each node in pre-order traversal and give it an id
    .eachBefore((d) => {
      d.data.id = (d.parent ? d.parent.data.id + "." : "") + d.data.name;
    })
    // Assign a value to each node, then sort it based on either position in map or assigned value (I think)
    .sum(d => d.value)
    .sort((a,b) => { return b.height - a.height || b.value  - a.value; });
  
  // Create a treemap based on the summed and sorted root node
  treemap(root);
  
  // Define each cell in the treemap
  var cell = svg.selectAll("g")
    // We only need to pull the leaf data (nodes with no children), so pull out that data
    .data(root.leaves())
    .enter()
    .append("g")
    .attr("class", "group")
    .attr("transform", (d) => "translate(" + d.x0 + "," + d.y0 + ")");
  
  // Use a rect element to represent each cell's data. Text will come later
  var tile = cell.append("rect")
    .attr("id", d => d.data.id)
    .attr("class", "tile")
    .attr("width", d => d.x1 - d.x0)
    .attr("height", d => d.y1 - d.y0)
    .attr("data-name", d => d.data.name)
    .attr("data-category", d => d.data.category)
    .attr("data-value", d => d.data.value)
    .attr("fill", d => color(d.data.category))
    // Instead of mouseover, doing mousemove to have the tooltip stay with the mouse as it moves over the large cell
    .on("mousemove", (d) => {
      tooltip.style("opacity", 0.9)
        .html("Name: " + d.data.name + "<br>Category: " + d.data.category + "<br>Value: " + d.data.value)
        .attr("data-value", d.data.value)
        .style("left", (d3.event.pageX) + 20 + "px")
        .style("top", (d3.event.pageY) - 20 + "px")
    })
    .on("mouseout", d => tooltip.style("opacity", 0));
  
  // Add text to each cell with data
  cell.append("text")
    .attr("class", "tile-text")
    // Use tspan for text
    .selectAll("tspan")
    .data(d => d.data.name.split(/(?=[A-Z][^A-Z])/g))
    .enter()
    .append("tspan")
    .attr("x", 4)
    .attr("y", (d,i) => 13 + i * 8)
    .text(d => d)
  
  // Create categories variable to use for legend, then remove duplicates
  var categories = root.leaves().map(nodes => nodes.data.category);
  categories = [...new Set(categories)];
  
  // Create legend
  var legend = d3.select("#legend")
    .append("svg")
    .attr("width", 500);
  const LEGEND_RECT_SIZE = 15;
  const LEGEND_H_SPACING = 150;
  const LEGEND_V_SPACING = 10;
  var legendElemsPerRow = Math.floor(legendWidth/LEGEND_H_SPACING);
  
  var legendElem = legend.append("g")
    .attr("transform", "translate(60,0)")
    .selectAll("g")
    .data(categories)
    .enter()
    .append("g")
    .attr("transform", (d,i) => { 
      return 'translate(' + 
      ((i%legendElemsPerRow)*LEGEND_H_SPACING) + 
        ',' + 
      ((Math.floor(i/legendElemsPerRow))*LEGEND_RECT_SIZE + (LEGEND_V_SPACING*(Math.floor(i/legendElemsPerRow)))) 
        + ')';
    })
    
  // Color squares for legend
  legendElem.append("rect")
    .attr("width", LEGEND_RECT_SIZE)
    .attr("height", LEGEND_RECT_SIZE)
    .attr("class", "legend-item")
    .attr("fill", d => color(d))
  
  // Text for legend
  legendElem.append("text")
    .attr('x', LEGEND_RECT_SIZE + 3)
    .attr('y', LEGEND_RECT_SIZE - 2)
    .text(d => d);
  
});